#!/usr/bin/env python3
import logging

import click

from wildfire.goes import downloader, utilities

DATETIME_FORMATS = ["%Y-%m-%dT%H:%M:%S"]

logging.basicConfig(level=logging.INFO)
_logger = logging.getLogger(__name__)


class IllegalChoiceError(Exception):
    pass


class Choices(click.ParamType):
    name = "choices"

    def __init__(self, available_choices, element_type):
        self.available_choices = available_choices
        self.element_type = element_type

    def convert(self, value, param, ctx):
        try:
            if isinstance(value, list):
                value = value[0]

            parsed_values = list(map(self.element_type, value.split(",")))
            if set(parsed_values) - set(self.available_choices):
                raise IllegalChoiceError()

            return parsed_values

        except ValueError:
            self.fail(f"Could not parse all arguments as {self.element_type}", param, ctx)
        except IllegalChoiceError:
            self.fail(f"All arguments must be in {self.available_choices}", param, ctx)


@click.command()
@click.argument("satellite", type=click.Choice(["G16", "G17"]))
@click.argument("regions", type=Choices(["M1", "M2", "C", "F"], str))
@click.argument("channels", type=Choices(list(range(1, 17)), int))
@click.argument("start", type=click.DateTime(formats=DATETIME_FORMATS))
@click.argument("end", type=click.DateTime(formats=DATETIME_FORMATS))
@click.argument("persist_directory", type=click.Path(exists=True, file_okay=False))
def download(satellite, regions, channels, start, end, persist_directory):
    """Download available GOES satellite data fulfilling the provided parameters.

    `bin/download_satellite_scans G16 M1,M2 1,3,4 2019-01-01T01:00:00 2019-02-01T01:11:00 downloaded_data`

    SATELLITE must be in the set (G16, G17). e.g. G16\n
    REGIONS is a comma-separated input whose elements must be in the set (M1, M2, F, C).
    e.g. M1,C\n
    CHANNELS is a comma-separated input whose elements must be bewtween 1 and 16
    inclusive. e.g. 1,2,5\n
    START must be in the following format: YYYY-MM-DDTHH:MM:SS. e.g. 2019-01-01T10:55:30\n
    END must be in the following format: YYYY-MM-DDTHH:MM:SS. e.g. 2019-01-01T10:55:30\n
    PERSIST_DIRECTORY is a path to a local directory at which to persist scans. Directory
    must already exist. e.g. ./downloaded_data\n
    """
    _logger.info(
        """Downloading available GOES satellite data fulfilling parameters:
    Satellite: %s
    Regions: %s
    Channels: %s
    Start Time: %s
    End Time: %s""",
        satellite,
        regions,
        channels,
        start,
        end,
    )
    scans_to_download = downloader.query_s3(
        satellite=utilities.SATELLITE_CONVERSION[satellite],
        regions=regions,
        channels=channels,
        start=start,
        end=end,
    )
    downloaded_data_gb = sum(map(lambda scan: scan.size, scans_to_download)) / 1e9
    if downloaded_data_gb > 10:
        downloader.check_size_with_user(size=downloaded_data_gb)
    downloader.download_batch(
        s3_object_summaries=scans_to_download, local_directory=persist_directory
    )
    _logger.info("Success.")


if __name__ == "__main__":
    download()
